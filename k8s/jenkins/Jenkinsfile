pipeline {

  stages {
    // Unit Test (테스트를 위해 python 컨테이너에서 실행)
    // Test 결과가 성공이면 Docker Build 수행
    // 테스트를 위해 적용한 스테이지로 필수로 포함할 필요는 없음
    stage('Test') {
      steps {
        container('python') {
          sh 'pip install -r requirements.txt'
          sh 'python test_app.py'
        }
      }
    }
    // Docker Build
    // kaniko 컨테이너에서 Dockerfile 을 통해 이미지 빌드
    // 컨테이너 내부에서 Docker 빌드를 위해 [kaniko](https://github.com/GoogleContainerTools/kaniko) 를 사용
    // Docker build 후 Docker Hub 에 Push
    stage('Docker Build') {
      steps {
        container('kaniko') {
          sh "executor --dockerfile=Dockerfile \
          --context=dir://${env.WORKSPACE} \
          --destination=<docker-id>/test-app:${currentBuild.number}"
        }
      }
    }
    // docker image 를 deployment.yaml 에 적용
    // deployment.yaml 의 image version 을 현재 빌드 번호로 변경
    // 변경된 deployment.yaml 을 git 에 push
    stage('Modified deployment.yaml') {
      steps {
        sh "sed -i 's/test-app:.*\$/test-app:${currentBuild.number}/g' deployment.yaml"
        withCredentials([gitUsernamePassword(credentialsId: 'gitlab-credential',
          gitToolName: 'git-tool')]) {
            sh 'git checkout main'
            sh 'git fetch --all'
            sh 'git add deployment.yaml'
            sh "git commit -m 'Update image version test-app:${currentBuild.number} in deployment.yaml'"
            sh 'git push -u origin main'
          }
      }
      post {
        success {
          echo 'Deploy Success'
        }
        failure {
          echo 'Deploy Failure'
        }
      }
    }
  }
}